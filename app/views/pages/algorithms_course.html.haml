%h4 Class 1:
%ul

  %li insertion sort
  %li review of O-notation
  %li solve the simple recurrence: T(n) = 2T(n/2)

%h4 Class 2:
%ul
  %li Merge sort recursive
  %li analysis of merge sort using the tree method

%h4 Class 3:
%ul
  %li Loop invariant
  %li Example of outer loop's loop invariant in Insertion sort
  %li Bottom Up Merge sort using the string: "MergeSortIsvFast"
  %li Correction of Error in lecture 2 in calculating index: middle = (p+q)/2
  %li Assign assignment: implement bottom up merge sort using 8^2, 8^4, 8^6, and 8^8 random numbers
  %li Discussion of why MergeSort requires additional space, but couldnt explain example well enough

%h4 Class 4:
%ul
  %li Quick Sort description
  %li Quick Sort as in book is unstable
  
%h4 Class 5:
%ul
  %li QuickSort Analsis
  %li Worst case and Average Case Analysis
  
%h4 Class 6
%ul
  %li Heapsort
  %li Heaport Analysis
  %li Quiz 1 On Quicksort, given an array with all values, 5, apply QuickSort on it, and conclude what is the worst case input
  
%h4 Class 7
%ul
  %li Analysis of Heapify, which takes O(n) time
  %li Count Sort
  %li Introduction of Radix Sort
