%h2.heading-green
  A Beginner Tutorial on Octave - Installation and Basic Commands

%h3.heading-green Installation

%pre
  %code
    sudo apt-add-repository ppa:octave/stable
    sudo apt-get update
    sudo apt-get install octave -y
    sudo apt-get install liboctave-dev -y

%h4.heading-green Fooling Around in the octave command line
%pre
  %code
    a = pi
    format long
    format short
    v = 1:-0.1:0
    eye(4)
    ones(2,4)
    a = [1 2 3 4 5 6]'
    v = a[1:4] the first four elements
    help eye; help rand; help help;
    A = [1 2; 3 4; 5 6]
    size(A)
    size(A, 1)
    size(A, 2)
    v = [1 2 3 4]
    length(v)
    length(A)
    pwd
    cd ".."
    ls
%pre.blue
  Text file "data" has the following data:
  12 3
  45 3
  567 2
  \... and so on
  We can read this file into a matrix as follows:
%pre
  %code
    load data
    load('data')
    who
    \% if you now look at the data variable, it will have the required data in a matrix
    whos
    clear A
    v = output_data(1:4)
    save modified_output.mat % will save whole session
    save modified_output.mat v % will only save v
    clear
    load modified_output.mat
    save hello.txt v -ascii
    a = [1 2; 3 4; 5 6]
    a(3,2) % will index into it (1-based)
    a(2,:) % fetch 2nd row
    a(:,2) % fetch 2nd column
    a([1 3], :) % get rows 1 and 3, and put them in an array
    a(:, 2) = [10; 11; 12] % new values for the 2nd column of a.
    a = [a, [100;101;102]] % append a column to the right with data 100,101,102
    a(:) % one column vector has all data; put all columns of a into a single column vector
    a = [1 2; 3 4; 5 6]
    b = [7 8; 9 10; 11 12]
    c = [a b]
    c = [a; b]
    c = [a, b]

\ 
We can do element wise operations on matrices, using a dot and another symbol. For instance,
\  
%pre
  %code
    A ./ 2
    A ./ B
    A .^ 4
    v = [1;2;3]
    v + ones(length(v), 1)
    a = [1 15 2 0.5]
    a < 3 % [1 0 1 1]
    find(a < 3) = [1 3 4] % first, third and fourth elements are less than three
    sum(a)
    prod(a)
    floor(a)
    ceil(a)
    max(A, [], 1) % maximum of each column is printed in a row vector
    max(A(:))
    A = magic(9)
    sum(A, 1)
    sum(A, 2)
    A .* eye(9)
    flipud(eye(9))

Moving on to plotting data.

%pre
  %code
    t = [0:0.01:0.98]
    y1 = sin(2*pi*4*t);
    y2 = cos(2*pi*4*t);
    plot(t, y1)
    hold on
    plot(t, y2, 'r')
    xlabel('time')
    ylabel('value')
    legend('sin', 'cos')
    title('my plot')
    print -dpng 'myPlot.png'
    close
    figure(1); plot(t, y1)
    figure(2); plot(t, y2)
    subplot(1,2,1)
    plot(t, y1)
    subplot(1,2,2)
    plot(t,y2)
